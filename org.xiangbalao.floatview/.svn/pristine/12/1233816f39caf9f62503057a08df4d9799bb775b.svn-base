package com.gamedashi.dtcq.hookApi;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import com.gamedashi.dtcq.hookApi.ADBCommandUtil.CommandResult;

import android.annotation.SuppressLint;
import android.app.ActivityManager;
import android.content.Context;
import android.content.res.AssetManager;
import android.app.Activity;
import android.util.Log;

/**
 * Welcome to use Injector tool coded by catfish, hope you can enjoy the
 * injection journey. First of all, you must make sure your device is root
 * access; Secondly you should implement a class whose class name is
 * "com.catfish.undercover.Undercover" and with a method declared as
 * "public void onInject(Context application)". This method will be called in
 * target process, you can design everything beginning from this method. Be
 * warning: we do not support native library in target process, which means you
 * can not call your own native method in target process unless you explicitly
 * load a native library with System.load().
 * 
 * public class Undercover {
 * 
 * public void onInject(Context application) { } }
 * 
 * @author catfish
 * 
 */
public class Injector {
	
  
//    public static native int startService();
//    
//    public static native void changeStatic(String str);
//    
//    public static native void startHook(String str);
    
  
	final static boolean DEBUG = true;
	final static String TAG = "catfish";
	private final static String EXECUTABLE = "inject";
	private Context mContext = null;
	static boolean ISBegin = false;


	public Injector(Context context) {
		mContext = context.getApplicationContext();

	}

	
	public boolean startInjection( String hoookPackageid)
			throws IllegalArgumentException {
		if (hoookPackageid == null || hoookPackageid.length() == 0) {
			throw new IllegalArgumentException(
					"empty process name is not allowed");
		}
		transferFiles(EXECUTABLE);
		checkProcessExist(hoookPackageid);
		startRoot(hoookPackageid);
		return true;
	}

	private final void transferFiles(String filename) {
		AssetManager assetManager = mContext.getAssets();
		try {
			String path = mContext.getFilesDir() + "/";
			File file = new File(path + filename);
			File data = new File(mContext.getPackageCodePath());
			if (file.exists() && (file.lastModified() > data.lastModified())) {
				return;
			}
			FileOutputStream fos = new FileOutputStream(path + filename);
			InputStream inputStream = assetManager.open(filename);
			byte[] buffer = new byte[8192];
			int count = 0;
			while ((count = inputStream.read(buffer)) != -1) {
				fos.write(buffer, 0, count);
			}
			fos.flush();
			fos.close();
			inputStream.close();
		} catch (IOException e) {
			Log.e(TAG, "transfer files failed", e);
		} catch (Exception e) {
			Log.e(TAG, "transfer files failed", e);
		}
	}

	private void checkProcessExist(String targetProces)
			throws IllegalArgumentException {
		ActivityManager mActivityManager = (ActivityManager) mContext
				.getSystemService(Context.ACTIVITY_SERVICE);
		int tarPid = -1;
		if (!"system_server".equals(targetProces)) {
			for (ActivityManager.RunningAppProcessInfo appProcess : mActivityManager
					.getRunningAppProcesses()) {
				String name = "";
	
				Log.e(TAG,name, null);
				
				if (appProcess.processName.equals(targetProces)) {
					tarPid = appProcess.pid;
					break;
				}
			}

			if (tarPid < 0) {

			} else {

			}
		}
	}
	
 
	@SuppressLint("NewApi")
	private final void startRoot(String hoookPackageid) {

		String filepath = mContext.getFilesDir().getPath() + "/";
		
		
		String chmod = "chmod 777 " + filepath + EXECUTABLE + " \n";

		String cmd = "su -c " + filepath + EXECUTABLE;

		FileManager.contentToTxt(filepath+"hook.txt", hoookPackageid);
 	
		
		LOGD(filepath);
  		ADBCommandUtil.adbCommandExec(ADBCommandUtil.SU, new String[] {chmod,cmd}, false);
 
		Injector.ISBegin = true;
	}

	private static void LOGD(String msg) {
		if (DEBUG) {
			Log.d(TAG, msg);
		}
	}
}
